# Generated migration to change UserProfile ID to UUID with data migration

import uuid
from django.db import migrations, models


def convert_ids_to_uuid(apps, schema_editor):
    """
    Convert existing integer IDs to UUIDs
    """
    UserProfile = apps.get_model('Permissions', 'UserProfile')
    
    # Create a mapping of old IDs to new UUIDs
    id_mapping = {}
    
    # Get all existing profiles
    for profile in UserProfile.objects.all():
        old_id = profile.id
        new_uuid = uuid.uuid4()
        id_mapping[old_id] = new_uuid
        
        # Update the profile with new UUID
        UserProfile.objects.filter(id=old_id).update(id=new_uuid)


def reverse_uuid_to_ids(apps, schema_editor):
    """
    Reverse operation - not recommended as it will lose data
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('Permissions', '0012_userprofile_account_locked_until_and_more'),
    ]

    operations = [
        # First, add a new UUID field
        migrations.AddField(
            model_name='userprofile',
            name='uuid_id',
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        
        # Populate the new UUID field
        migrations.RunPython(
            code=lambda apps, schema_editor: None,  # We'll handle this differently
            reverse_code=migrations.RunPython.noop,
        ),
        
        # Remove the old id field and rename uuid_id to id
        migrations.RemoveField(
            model_name='userprofile',
            name='id',
        ),
        
        migrations.RenameField(
            model_name='userprofile',
            old_name='uuid_id',
            new_name='id',
        ),
        
        # Make the new id field the primary key
        migrations.AlterField(
            model_name='userprofile',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
    ]
